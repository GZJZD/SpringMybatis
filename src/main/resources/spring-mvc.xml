<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 自动扫描  @Controller-->
    <context:component-scan base-package="com.web.controller"/>
    <import resource="spring-mybatis.xml"/>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/> <!-- JSON转换器 -->
            </list>
        </property>
    </bean>


    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/webapp/" />
        <property name="suffix" value=".html"/>
    </bean>

    <!-- 文件上传配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 上传文件大小限制为31M，31*1024*1024 -->
        <property name="maxUploadSize" value="32505856"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="4096"/>
    </bean>
    <!-- 添加后可以显示welcome-file界面 -->
    <!--<mvc:default-servlet-handler/>-->


    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestination" ref="queueDestination"/>
        <!-- 使 deliveryMode, priority, timeToLive设置生效-->
        <property name="explicitQosEnabled" value="true" />
        <!-- 持久化 如果设置为非持久化MQ服务器重启后MQ中的数据会丢失-->
        <property name="deliveryPersistent" value="true"/>
        <!--这里注意:如果不开启事务，消息在异常的情况下是不会重试的-->
        <property name="sessionTransacted" value="true"/>
    </bean>



    <!-- 自动扫描 -->
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!--<property name="brokerURL" value="tcp://192.168.3.183:61616"/>-->
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <!--<property name="brokerURL" value="failover:(tcp://192.168.3.176:61619,tcp://192.168.3.168:61617,tcp://192.168.3.168:61618)?initialReconnectDelay=100" />-->
        <!-- 这里定义重试策略,注意：只有持久化的才会重试-->
        <property name="redeliveryPolicyMap" ref="redeliveryPolicyMap"/>

    </bean>

    <!--这里设置各个消息队列的重发机制-->
    <bean id="redeliveryPolicyMap" class="org.apache.activemq.broker.region.policy.RedeliveryPolicyMap">
        <property name="redeliveryPolicyEntries">
            <list>
                <ref bean="bizRedeliveryPolicy"/>
            </list>
        </property>
    </bean>

    <bean id="bizRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
        <!--重发次数 延时、延时系数、延时指数开关、目标（重发等待时间1s, 2s, 4s, 8s）-->
        <property name="maximumRedeliveries" value="3"/>
        <property name="redeliveryDelay" value="1000"/>
        <property name="backOffMultiplier" value="2"/>
        <property name="useExponentialBackOff" value="true"/>
        <property name="destination" ref="queueDestination"/>
    </bean>

    <!--
        ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory
        可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗。
        要依赖于 activemq-pool包
     -->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="5"/>
    </bean>



    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>
        <property name="reconnectOnException" value="true"/>
    </bean>




    <!-- p2p -->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 消息队列的名字 -->
        <constructor-arg index="0" value="orderTopic"/>

    </bean>



    <!-- 消息监听器 -->
    <bean id="consumerMessageListener" class="com.web.listeners.ConsumerMessageListener"/>
    <!-- 消息监听容器 -->
    <bean id="jmsContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <!--消息队列的名字-->
        <property name="destinationName" value="orderTopic1" />
        <property name="messageListener" ref="consumerMessageListener" />
        <!--订阅者开关-->
        <property name="pubSubDomain" value="true"/>
        <!--这里注意:如果不开启事务，消息在异常的情况下是不会重试的-->
        <property name="sessionTransacted" value="true"/>
    </bean>

</beans>

