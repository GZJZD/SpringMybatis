// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.web.servant.center;

import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.annotation.*;
import com.qq.tars.common.support.Holder;

@Servant
public interface TraderServantPrx {

	public int userLogin(userLoginRequest req, @TarsHolder Holder<userLoginResponse> rsp);

	public int userLogin(userLoginRequest req, @TarsHolder Holder<userLoginResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_userLogin(@TarsCallback TraderServantPrxCallback callback, userLoginRequest req);

	public void async_userLogin(@TarsCallback TraderServantPrxCallback callback, userLoginRequest req, @TarsContext java.util.Map<String, String> ctx);

	public int userLogout(userLogoutRequest req, @TarsHolder Holder<userLogoutResponse> rsp);

	public int userLogout(userLogoutRequest req, @TarsHolder Holder<userLogoutResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_userLogout(@TarsCallback TraderServantPrxCallback callback, userLogoutRequest req);

	public void async_userLogout(@TarsCallback TraderServantPrxCallback callback, userLogoutRequest req, @TarsContext java.util.Map<String, String> ctx);

	public int orderOpen(orderOpenRequest req, @TarsHolder Holder<orderOpenResponse> rsp);

	public int orderOpen(orderOpenRequest req, @TarsHolder Holder<orderOpenResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_orderOpen(@TarsCallback TraderServantPrxCallback callback, orderOpenRequest req);

	public void async_orderOpen(@TarsCallback TraderServantPrxCallback callback, orderOpenRequest req, @TarsContext java.util.Map<String, String> ctx);

	public int orderClose(orderCloseRequest req, @TarsHolder Holder<orderCloseResponse> rsp);

	public int orderClose(orderCloseRequest req, @TarsHolder Holder<orderCloseResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_orderClose(@TarsCallback TraderServantPrxCallback callback, orderCloseRequest req);

	public void async_orderClose(@TarsCallback TraderServantPrxCallback callback, orderCloseRequest req, @TarsContext java.util.Map<String, String> ctx);

	public int instrumentQuery(instrumentQueryRequest req, @TarsHolder Holder<instrumentQueryResponse> rsp);

	public int instrumentQuery(instrumentQueryRequest req, @TarsHolder Holder<instrumentQueryResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_instrumentQuery(@TarsCallback TraderServantPrxCallback callback, instrumentQueryRequest req);

	public void async_instrumentQuery(@TarsCallback TraderServantPrxCallback callback, instrumentQueryRequest req, @TarsContext java.util.Map<String, String> ctx);

	public int instrumentCommissionQuery(instrumentCommissionQueryRequest req, @TarsHolder Holder<instrumentCommissionQueryResponse> rsp);

	public int instrumentCommissionQuery(instrumentCommissionQueryRequest req, @TarsHolder Holder<instrumentCommissionQueryResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_instrumentCommissionQuery(@TarsCallback TraderServantPrxCallback callback, instrumentCommissionQueryRequest req);

	public void async_instrumentCommissionQuery(@TarsCallback TraderServantPrxCallback callback, instrumentCommissionQueryRequest req, @TarsContext java.util.Map<String, String> ctx);

	public int marketDataQuery(marketDataQueryRequest req, @TarsHolder Holder<marketDataQueryResponse> rsp);

	public int marketDataQuery(marketDataQueryRequest req, @TarsHolder Holder<marketDataQueryResponse> rsp, @TarsContext java.util.Map<String, String> ctx);

	public void async_marketDataQuery(@TarsCallback TraderServantPrxCallback callback, marketDataQueryRequest req);

	public void async_marketDataQuery(@TarsCallback TraderServantPrxCallback callback, marketDataQueryRequest req, @TarsContext java.util.Map<String, String> ctx);
}
